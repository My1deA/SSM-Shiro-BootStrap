<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">



    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->


    <!--缓存框架
           ehcache Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
       caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:
             <property name="cacheManager" ref="ehCacheManager"/> -->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:
        <property name="cacheManagerConfigFile" value="classpath:some/path/to/ehcache.xml"/> -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>


    <!-- 配置 securityManager
          Shiro's main business-tier object for web-enabled applications
       (use DefaultSecurityManager instead when there is no web environment)-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--单例模式 Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <!--<property name="sessionMode" value="native"/>-->
        <!--配置缓存-->
        <property name="cacheManager" ref="cacheManager"/>
        <!--自定义realm -->
        <property name="realm" ref="userRealm"/>
        <!--配置sessionManage-->
        <property name="sessionManager" ref="sessionManager"/>
        <!--配置rememberMe-->
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>


    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="cn.T4.credentials.MyHashedCredentialsMatcher">
        <!-- 使用Spring构造器注入cacheManager  自己实现一个来Map 来存储 信息-->
        <constructor-arg ref="cacheManager"/>
        <!-- 指定散列算法名称 -->
        <property name="hashAlgorithmName" value="md5"/>
        <!-- 指定散列迭代的次数 -->
        <property name="hashIterations" value="2"/>
        <!-- 是否储存散列后的密码为16进制，需要和生成密码时的一样，默认是base64 -->
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- 配置自己的UserRealm
            Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <bean id="userRealm" class="cn.T4.shiro.UserRealm">
        <!--是否启用缓存-->
        <property name="credentialsMatcher" ref="credentialsMatcher"></property>
        <property name="cachingEnabled" value="true"></property>
        <!--分别启用 认证 和 授权 缓存-->
        <property name="authenticationCachingEnabled" value="true"></property>
        <property name="authenticationCacheName" value="authenticationCache"></property>

        <property name="authorizationCachingEnabled" value="true"></property>
        <property name="authorizationCacheName" value="authorizationCache"></property>
    </bean>

    <!--rememberMe-->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="maxAge" value="2592000"></property>
        <property name="httpOnly" value="true"></property>
    </bean>
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- cipherKey是加密rememberMe Cookie的密匙，默认AES算法 -->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"></property>
    </bean>
    <!--&lt;!&ndash; 基于Form表单的身份验证过滤器 &ndash;&gt;
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        &lt;!&ndash; 这两个字段，username和password要和表单中定义的username和password字段名称相同，可以更改，但是表单和XML要对应 &ndash;&gt;
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="loginUrl" value="/login.jsp"/>
        &lt;!&ndash; rememberMeParam是rememberMe请求参数名，请求参数是boolean类型，true表示记住我 &ndash;&gt;
        <property name="rememberMeParam" value="rememberMe"/>
    </bean>-->

    <!--sessionCookie-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"></property>
        <property name="maxAge" value="-1"></property>
    </bean>
    <!--生成sessionIdCookie-->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"></bean>
    <!--SessionDao-->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"></property>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"></property>
    </bean>
    <!--会话验证调度器-->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"></property>
        <property name="sessionManager" ref="sessionManager"></property>
    </bean>
    <!--会话管理器-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--配置持久化Dao-->
        <property name="sessionDAO" ref="sessionDAO"></property>
        <!--全局会话过期时间-->
        <property name="globalSessionTimeout" value="1800000"></property>
        <!--是否自动删除无效对话-->
        <property name="deleteInvalidSessions" value="true"/>
        <!--配置会话验证-->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"></property>
        <!--配置sessionCookie-->
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>



    <!-- =========================================================
         Shiro Spring-specific integration 特有整合
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->

    <!--声明周期-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 启动 Shiro Annotations
            Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>


    <!-- 远程调用安全
            Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
         with a Subject for security checks. -->
    <bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 定义shiroFilter bean id 和web.xml相同
            Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--未认证的访问的页面-->
        <property name="loginUrl" value="/login.jsp"/>
        <!--登录成功后访问的页面-->
        <property name="successUrl" value="/index.jsp"/>
        <!--未授权也能访问的页面-->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="aName" value-ref="someFilterPojo"/>
            </util:map>
        </property> -->
        <property name="filterChainDefinitions">
            <value>
                <!--map key value
                    请求访问的URL资源 = 拦截器
                    ANT风格 ？任意一个字符   /* 任意内容 /** 任意目录内容

                    anno 匿名拦截器 （未认证情况下允许访问）
                    authc 认证拦截器 （认证成功下允许访问）
                    logout 认证过滤器
                    roles[角色名称] 角色过滤器

                    -->
                <!--/logout=logout 可以用-->
                <!--# everything else requires authentication:
                /index.jsp = authc-->


                /static/** = anon
                /js/** = anon
                /css/** = anon
                /image/** = anon
                /user/login=anon
                /index=anon
                /logout=logout

                /student.jsp=roles[stu]
                /teacher.jsp=roles[tea]
                /list.jsp=roles[tea,stu]

                /**=authc
            </value>
        </property>

        <!--工厂注入-->
        <!--<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>-->
    </bean>

    <!--工厂注入-->
    <!--工厂注入 构建bean-->
   <!-- <bean id="filterChainDefinitionMapBuilder" class="cn.T4.credentials.FilterChainDefinitionMapBuilder"></bean>
    <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="builder"></bean>-->


</beans>